% Prompt the user for the 10 random alphanumeric characters
inputChars = input('Enter 10 random alphanumeric characters: ', 's');

% Check that the input is valid
if length(inputChars) ~= 10 || ~all(isstrprop(inputChars, 'alphanum'))
    error('Invalid input. Please enter exactly 10 alphanumeric characters.');
end

% Define the spacing between characters
spacing = 0.2; % This value may need to be adjusted based on your setup

% For each character in the input, command the robot to follow the corresponding path
for i = 1:10
    char = inputChars(i);
    
    character = hershey{upper(char)}; % Select the character to draw
    scale = 0.1; % Select the scale of the digit. 1 = 100%, 0.1 = 10% scale

    path = [scale*character.stroke; zeros(1,numcols(character.stroke))]; % create the path 

    % Add the spacing offset to the x-coordinate of the path
    path(1,:) = path(1,:) + spacing * (i - 1);

    % Where ever there is an nan it indicates that we need to lift up.
    k = find(isnan(path(1,:)));

    % At these positions add in a z hight
    path(:,k) = path(:,k-1); path(3,k) = 0.2*scale; % Determine the hight of the lift up motions. 0.2 * scale is the height. 0.2 is in m

    traj = [path'*1000]; % convert to the mm units so that we can use the rtde toolbox

    % Generate a plot of what we are expecting
    scatter3(traj(:,1), traj(:,2), traj(:,3));
    plot3(traj(:,1), traj(:,2), traj(:,3));

    % NOW USE THE RTDE TOOLBOX TO EXECUTE THIS PATH!

    % Populate the path array
    for j = 1:length(traj)
        disp(j);
        disp(traj(j,1:3) + [-588.53, -133.30 100]);
        point = [[(traj(j,1:3) + [-588.53, -133.30 30]),(home(4:6))],a,v,0,blend];
        if isempty(path)
            path = point;
        else
            path = cat(1,path,point);
        end
    end

    % Execute the movement!
    poses = rtde.movej(path);

    rtde.drawPath(poses);
end

rtde.close;



